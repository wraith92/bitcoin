version: '3'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - hadoop
    env_file:
      - ./hadoop.env

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9092,INTERNAL://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,INTERNAL://kafka:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CREATE_TOPICS: "bitcoin_prices:1:1"
    depends_on:
      - zookeeper
    networks:
      - hadoop
    env_file:
      - ./hadoop.env

  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
    volumes:
      - ./app:/app
    networks:
      - hadoop
    command: spark-submit --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.1.1,mysql:mysql-connector-java:8.0.26 /app/spark_kafka_to_mysql.py

  spark-worker:
    image: bitnami/spark:latest
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    networks:
      - hadoop
    
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    ports:
      - "9870:9870"
      - "9000:9000"
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
      - TERM=xterm
    networks:
      - hadoop
    env_file:
      - ./hadoop.env
      

  datanode-1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode-1
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      - CLUSTER_NAME=test
      - SERVICE_PRECONDITION=namenode:9000
    depends_on:
      - namenode
    networks:
      - hadoop
    env_file:
      - ./hadoop.env

  datanode-2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode-2
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      - CLUSTER_NAME=test
      - SERVICE_PRECONDITION=namenode:9000
    depends_on:
      - namenode
    networks:
      - hadoop
    env_file:
      - ./hadoop.env

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    environment:
      - CLUSTER_NAME=test
      - YARN_RESOURCEMANAGER_HOSTNAME=resourcemanager
    depends_on:
      - namenode
    networks:
      - hadoop
    env_file:
      - ./hadoop.env

  nodemanager:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    environment:
      - CLUSTER_NAME=test
    depends_on:
      - resourcemanager
    networks:
      - hadoop
    env_file:
      - ./hadoop.env

  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    environment:
      - CLUSTER_NAME=test
    depends_on:
      - namenode
      - datanode-1
      - datanode-2
    networks:
      - hadoop
    env_file:
      - ./hadoop.env

  websocket-bitcoin:
    build:
      context: ./app
    volumes:
      - ./app:/app
    working_dir: /app
    command: ["./wait-for-it.sh", "kafka:9092", "--", "python", "websocket_bitcoin.py"]
    depends_on:
      - kafka
    networks:
      - hadoop
    env_file:
      - ./hadoop.env

  backend-fastapi:
    build:
      context: ./backend
    ports:
      - "8000:8000"
    depends_on:
      - kafka
    networks:
      - hadoop
    env_file:
      - ./backend/.env

  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:80"
    depends_on:
      - backend-fastapi
    networks:
      - hadoop

  mysql:
    image: mysql:5.7
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: bitcoin_data
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_NET_READ_TIMEOUT: 120
      MYSQL_NET_WRITE_TIMEOUT: 120
    networks:
      - hadoop
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

networks:
  hadoop:
    driver: bridge

volumes:
  hadoop_namenode:
  hadoop_datanode:
  hadoop_historyserver:
  mysql_data:
